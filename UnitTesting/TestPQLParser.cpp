#include <string>
#include <map>
#include "TestPQLParser.h"
#include "../SPA/PQLParser.h"

using std::string;
using std::map;

void TestPQLParser::setUp() {}
void TestPQLParser::tearDown() {}

CPPUNIT_TEST_SUITE_REGISTRATION(TestPQLParser);

void TestPQLParser::test_one_decl_one()
{
    PQLParser parser;
    map<string, DesignEnt> entTable;
    map<string, DesignEnt>::iterator it;
    string queryStr = "assign al3t;";
    string s;
    parser.parse(queryStr);
    entTable = parser.get_ent_table();
    CPPUNIT_ASSERT_EQUAL(0, parser.get_parse_errors());
    CPPUNIT_ASSERT_EQUAL(1, (int)entTable.size());
    s = string("al3t");
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != entTable.end());
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_ASSIGN);

    queryStr = "procedure bnvb#;";
    parser.parse(queryStr);
    entTable = parser.get_ent_table();
    CPPUNIT_ASSERT_EQUAL(0, parser.get_parse_errors());
    CPPUNIT_ASSERT_EQUAL(1, (int)entTable.size());
    s = string("bnvb#");
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != entTable.end());
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_PROC);

    queryStr = "stmtLst H1bvg;";
    parser.parse(queryStr);
    entTable = parser.get_ent_table();
    CPPUNIT_ASSERT_EQUAL(0, parser.get_parse_errors());
    CPPUNIT_ASSERT_EQUAL(1, (int)entTable.size());
    s = string("H1bvg");
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != entTable.end());
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_STMTLST);

    queryStr = "stmt s7772a;";
    parser.parse(queryStr);
    entTable = parser.get_ent_table();
    CPPUNIT_ASSERT_EQUAL(0, parser.get_parse_errors());
    CPPUNIT_ASSERT_EQUAL(1, (int)entTable.size());
    s = string("s7772a");
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != entTable.end());
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_STMT);

    queryStr = "call Gbcv1;";
    parser.parse(queryStr);
    entTable = parser.get_ent_table();
    CPPUNIT_ASSERT_EQUAL(0, parser.get_parse_errors());
    CPPUNIT_ASSERT_EQUAL(1, (int)entTable.size());
    s = string("Gbcv1");
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != entTable.end());
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_CALL);

    queryStr = "while KMB2vx;";
    parser.parse(queryStr);
    entTable = parser.get_ent_table();
    CPPUNIT_ASSERT_EQUAL(0, parser.get_parse_errors());
    CPPUNIT_ASSERT_EQUAL(1, (int)entTable.size());
    s = string("KMB2vx");
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != entTable.end());
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_WHILE);

    queryStr = "if u;";
    parser.parse(queryStr);
    entTable = parser.get_ent_table();
    CPPUNIT_ASSERT_EQUAL(0, parser.get_parse_errors());
    CPPUNIT_ASSERT_EQUAL(1, (int)entTable.size());
    s = string("u");
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != entTable.end());
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_IF);

    queryStr = "variable x;";
    parser.parse(queryStr);
    entTable = parser.get_ent_table();
    CPPUNIT_ASSERT_EQUAL(0, parser.get_parse_errors());
    CPPUNIT_ASSERT_EQUAL(1, (int)entTable.size());
    s = string("x");
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != entTable.end());
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_VAR);

    queryStr = "constant c2;";
    parser.parse(queryStr);
    entTable = parser.get_ent_table();
    CPPUNIT_ASSERT_EQUAL(0, parser.get_parse_errors());
    CPPUNIT_ASSERT_EQUAL(1, (int)entTable.size());
    s = string("c2");
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != entTable.end());
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_CONST);
       
    queryStr = "prog_line plbc;";
    parser.parse(queryStr);
    entTable = parser.get_ent_table();
    CPPUNIT_ASSERT_EQUAL(0, parser.get_parse_errors());
    CPPUNIT_ASSERT_EQUAL(1, (int)entTable.size());
    s = string("plbc");
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != entTable.end());
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_PROGLINE);

    // whitespace test
    queryStr = "\t  assign  \t \n nbnesdf1#bvsAA   \n;";
    parser.parse(queryStr);
    entTable = parser.get_ent_table();
    CPPUNIT_ASSERT_EQUAL(0, parser.get_parse_errors());
    CPPUNIT_ASSERT_EQUAL(1, (int)entTable.size());
    s = string("nbnesdf1#bvsAA");
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != entTable.end());
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_ASSIGN);
}

void TestPQLParser::test_one_decl()
{
    PQLParser parser;
    string queryStr = "assign afC,bca,ncvb1;";
    string s;
    map<string, DesignEnt> entTable;
    map<string, DesignEnt>::iterator it, endIt;
    parser.parse(queryStr);
    entTable = parser.get_ent_table();
    CPPUNIT_ASSERT_EQUAL(0, parser.get_parse_errors());
    CPPUNIT_ASSERT_EQUAL(3, (int)entTable.size());
    endIt = entTable.end();
    s = "afC";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != endIt);
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_ASSIGN);
    s = "bca";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != endIt);
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_ASSIGN);
    s = "bca";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != endIt);
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_ASSIGN);

    queryStr = "  procedure  pl123,\nABsx1,\tgawdvbS1\n\t,  xujrE1;";
    parser.parse(queryStr);
    entTable = parser.get_ent_table();
    CPPUNIT_ASSERT_EQUAL(0, parser.get_parse_errors());
    CPPUNIT_ASSERT_EQUAL(4, (int)entTable.size());
    endIt = entTable.end();
    s = "pl123";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != endIt);
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_PROC);
    s = "ABsx1";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != endIt);
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_PROC);
    s = "gawdvbS1";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != endIt);
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_PROC);
    s = "xujrE1";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != endIt);
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_PROC);

    queryStr = "stmtLst   bhvx1, CVS1\n\n\t, MBMcb1,\nHH123,YFS1cvx; \n";
    parser.parse(queryStr);
    entTable = parser.get_ent_table();
    CPPUNIT_ASSERT_EQUAL(0, parser.get_parse_errors());
    CPPUNIT_ASSERT_EQUAL(5, (int)entTable.size());
    endIt = entTable.end();
    s = "bhvx1";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != endIt);
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_STMTLST);
    s = "CVS1";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != endIt);
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_STMTLST);
    s = "MBMcb1";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != endIt);
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_STMTLST);
    s = "HH123";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != endIt);
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_STMTLST);
    s = "YFS1cvx";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != endIt);
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_STMTLST);

    queryStr = "stmt a,b, f#1sdc;";
    parser.parse(queryStr);
    entTable = parser.get_ent_table();
    CPPUNIT_ASSERT_EQUAL(0, parser.get_parse_errors());
    CPPUNIT_ASSERT_EQUAL(3, (int)entTable.size());
    endIt = entTable.end();
    s = "a";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != endIt);
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_STMT);
    s = "b";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != endIt);
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_STMT);
    s = "f#1sdc";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != endIt);
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_STMT);

    queryStr = "\t\n\t \tcall gbd1  , ccAS123\n  \t;";
    parser.parse(queryStr);
    entTable = parser.get_ent_table();
    CPPUNIT_ASSERT_EQUAL(0, parser.get_parse_errors());
    CPPUNIT_ASSERT_EQUAL(2, (int)entTable.size());
    endIt = entTable.end();
    s = "gbd1";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != endIt);
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_CALL);
    s = "ccAS123";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != endIt);
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_CALL);

    queryStr = "while W123v, qfdf1t5,\t\n bv11bv\t\n,x\n\t,nbnx1;";
    parser.parse(queryStr);
    entTable = parser.get_ent_table();
    CPPUNIT_ASSERT_EQUAL(0, parser.get_parse_errors());
    CPPUNIT_ASSERT_EQUAL(5, (int)entTable.size());
    endIt = entTable.end();
    s = "W123v";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != endIt);
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_WHILE);
    s = "qfdf1t5";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != endIt);
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_WHILE);
    s = "bv11bv";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != endIt);
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_WHILE);
    s = "x";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != endIt);
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_WHILE);
    s = "nbnx1";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != endIt);
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_WHILE);

    queryStr = "\n\n\n\tif nmb1, \n  xgcx1;";
    parser.parse(queryStr);
    entTable = parser.get_ent_table();
    CPPUNIT_ASSERT_EQUAL(0, parser.get_parse_errors());
    CPPUNIT_ASSERT_EQUAL(2, (int)entTable.size());
    endIt = entTable.end();
    s = "nmb1";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != endIt);
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_IF);
    s = "xgcx1";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != endIt);
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_IF);

    queryStr = " variable   Bb1, cvx1, \n v1sbaA12# ;";
    parser.parse(queryStr);
    entTable = parser.get_ent_table();
    CPPUNIT_ASSERT_EQUAL(0, parser.get_parse_errors());
    CPPUNIT_ASSERT_EQUAL(3, (int)entTable.size());
    endIt = entTable.end();
    s = "Bb1";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != endIt);
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_VAR);
    s = "cvx1";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != endIt);
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_VAR);
    s = "v1sbaA12#";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != endIt);
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_VAR);

    queryStr = "constant  Cb#zsd1, Jvd11a, \n\t   y1123h,  kkj1#n;";
    parser.parse(queryStr);
    entTable = parser.get_ent_table();
    CPPUNIT_ASSERT_EQUAL(0, parser.get_parse_errors());
    CPPUNIT_ASSERT_EQUAL(4, (int)entTable.size());
    endIt = entTable.end();
    s = "Cb#zsd1";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != endIt);
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_CONST);
    s = "Jvd11a";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != endIt);
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_CONST);
    s = "y1123h";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != endIt);
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_CONST);
    s = "kkj1#n";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != endIt);
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_CONST);

    // lowercase and uppercase x are different
    queryStr = "prog_line   a01tT1z, bcv1, x, B\n, cx1, X, \t z;";
    parser.parse(queryStr);
    entTable = parser.get_ent_table();
    CPPUNIT_ASSERT_EQUAL(0, parser.get_parse_errors());
    CPPUNIT_ASSERT_EQUAL(7, (int)entTable.size());
    endIt = entTable.end();
    s = "a01tT1z";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != endIt);
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_PROGLINE);
    s = "bcv1";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != endIt);
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_PROGLINE);
    s = "x";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != endIt);
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_PROGLINE);
    s = "B";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != endIt);
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_PROGLINE);
    s = "cx1";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != endIt);
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_PROGLINE);
    s = "X";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != endIt);
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_PROGLINE);
    s = "z";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != endIt);
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_PROGLINE);
}

void TestPQLParser::test_mult_decl()
{
    string queryStr = "\n\nassign Ccxx1, bd1; \n";
    queryStr += "procedure pl123, \n\nxvcxv1, ggs1g;";
    queryStr += "call call123, x, nbc;\n\t\n";
    queryStr += "stmtLst ssbdv1, g2cx1#, X, mmmio;";
    queryStr += "\t\n  variable   \n\t vvvv1, nbv1; ";
    queryStr += "stmt Ty123; assign x56v231,\t\nUU12;";
    queryStr += "while www123, \n\t  HJ13s, rr75#1g;";
    queryStr += "constant hbdg1, FFA72h, bcsdf1hf1;";
    queryStr += "if\n\tiii,\tpc21sa1,\nnotPassword;";
    queryStr += "\t\tprog_line Plvx1, bbnb1g#g;";
    queryStr += "stmt a,b\n;";
    PQLParser parser;
    string s;
    map<string, DesignEnt> entTable;
    map<string, DesignEnt>::iterator it, endIt;
    parser.parse(queryStr);
    entTable = parser.get_ent_table();
    CPPUNIT_ASSERT_EQUAL(0, parser.get_parse_errors());
    CPPUNIT_ASSERT(30, (int)entTable.size());
    s = "Ccxx1";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != entTable.end());
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_ASSIGN);
    s = "bd1";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != entTable.end());
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_ASSIGN);
    s = "pl123";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != entTable.end());
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_PROC);
    s = "xvcxv1";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != entTable.end());
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_PROC);
    s = "ggs1g";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != entTable.end());
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_PROC);
    s = "call123";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != entTable.end());
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_CALL);
    s = "x";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != entTable.end());
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_CALL);
    s = "nbc";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != entTable.end());
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_CALL);
    s = "ssbdv1";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != entTable.end());
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_STMTLST);
    s = "g2cx1#";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != entTable.end());
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_STMTLST);
    s = "X";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != entTable.end());
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_STMTLST);
    s = "mmmio";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != entTable.end());
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_STMTLST);
    s = "vvvv1";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != entTable.end());
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_VAR);
    s = "nbv1";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != entTable.end());
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_VAR);
    s = "Ty123";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != entTable.end());
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_STMT);
    s = "x56v231";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != entTable.end());
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_ASSIGN);
    s = "UU12";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != entTable.end());
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_ASSIGN);
    s = "www123";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != entTable.end());
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_WHILE);
    s = "HJ13s";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != entTable.end());
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_WHILE);
    s = "rr75#1g";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != entTable.end());
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_WHILE);
    s = "hbdg1";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != entTable.end());
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_CONST);
    s = "FFA72h";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != entTable.end());
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_CONST);
    s = "bcsdf1hf1";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != entTable.end());
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_CONST);
    s = "iii";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != entTable.end());
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_IF);
    s = "pc21sa1";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != entTable.end());
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_IF);
    s = "notPassword";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != entTable.end());
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_IF);
    s = "Plvx1";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != entTable.end());
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_PROGLINE);
    s = "bbnb1g#g";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != entTable.end());
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_PROGLINE);
    s = "a";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != entTable.end());
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_STMT);
    s = "b";
    it = entTable.find(s);
    CPPUNIT_ASSERT(it != entTable.end());
    CPPUNIT_ASSERT_EQUAL(it->first, s);
    CPPUNIT_ASSERT_EQUAL(it->second, ENT_STMT);
}