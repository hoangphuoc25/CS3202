#include <string>
#include <map>
#include <vector>

#include "../SPA/ResultsTable.h"
#include "Test_02_ResultsTable.h"

using std::map;
using std::pair;
using std::string;
using std::vector;

void Test_02_ResultsTable::setUp() {}
void Test_02_ResultsTable::tearDown() {}

CPPUNIT_TEST_SUITE_REGISTRATION(Test_02_ResultsTable);

void Test_02_ResultsTable::test_syn_0_transaction()
{
    ResultsTable rTable;
    rTable.syn_0_transaction_begin("firstCol", RV_STRING);
    CPPUNIT_ASSERT_EQUAL(true, rTable.is_alive());
    rTable.syn_0_add_row("valOne");
    rTable.syn_0_add_row("valTwo");
    rTable.syn_0_add_row("valThree");
    rTable.syn_0_transaction_end();
    CPPUNIT_ASSERT_EQUAL(true, rTable.is_alive());
    CPPUNIT_ASSERT_EQUAL(true, rTable.has_synonym("firstCol"));
    rTable.checkout_transaction_begin();
    Table *table = rTable.checkout_table("firstCol");
    const map<int, string>& colToSyn = table->get_col_to_synonym();
    CPPUNIT_ASSERT_EQUAL(1, (int)colToSyn.size());
    map<int, string>::const_iterator isIt = colToSyn.find(0);
    CPPUNIT_ASSERT(isIt != colToSyn.end());
    CPPUNIT_ASSERT_EQUAL(string("firstCol"), isIt->second);
    const map<string, int>& synToCol = table->get_synonym_to_col();
    CPPUNIT_ASSERT_EQUAL(1, (int)synToCol.size());
    map<string, int>::const_iterator siIt = synToCol.find("firstCol");
    CPPUNIT_ASSERT(siIt != synToCol.end());
    CPPUNIT_ASSERT_EQUAL(0, siIt->second);
    const vector<Record>& records = table->get_records();
    CPPUNIT_ASSERT_EQUAL(3, (int)records.size());
    Record record;
    record.reset();
    record.add_value("valOne");
    CPPUNIT_ASSERT_EQUAL(record, records[0]);
    record.reset();
    record.add_value("valTwo");
    CPPUNIT_ASSERT_EQUAL(record, records[1]);
    record.reset();
    record.add_value("valThree");
    CPPUNIT_ASSERT_EQUAL(record, records[2]);
    rTable.checkout_transaction_end();
    CPPUNIT_ASSERT_EQUAL(true, rTable.is_alive());
}

void Test_02_ResultsTable::test_syn_1_transaction()
{
    ResultsTable rTable;
    rTable.syn_0_transaction_begin("firstCol", RV_INT);
    CPPUNIT_ASSERT_EQUAL(true, rTable.is_alive());
    rTable.syn_0_add_row(1);
    rTable.syn_0_add_row(26156);
    rTable.syn_0_add_row(351);
    rTable.syn_0_transaction_end();
    CPPUNIT_ASSERT_EQUAL(true, rTable.is_alive());

    const vector<Record>& recordsOne =
            rTable.syn_1_transaction_begin("firstCol");
    CPPUNIT_ASSERT_EQUAL(3, (int)recordsOne.size());
    Record record;
    record.reset();
    record.add_value(1);
    CPPUNIT_ASSERT_EQUAL(record, recordsOne[0]);
    record.reset();
    record.add_value(26156);
    CPPUNIT_ASSERT_EQUAL(record, recordsOne[1]);
    record.reset();
    record.add_value(351);
    CPPUNIT_ASSERT_EQUAL(record, recordsOne[2]);
    rTable.syn_1_mark_row_ok(1);
    rTable.syn_1_transaction_end();
    CPPUNIT_ASSERT_EQUAL(true, rTable.is_alive());

    rTable.checkout_transaction_begin();
    Table *table = rTable.checkout_table("firstCol");
    const map<int, string>& colToSyn = table->get_col_to_synonym();
    CPPUNIT_ASSERT_EQUAL(1, (int)colToSyn.size());
    map<int, string>::const_iterator isIt = colToSyn.find(0);
    CPPUNIT_ASSERT(isIt != colToSyn.end());
    CPPUNIT_ASSERT_EQUAL(string("firstCol"), isIt->second);
    const map<string, int>& synToCol = table->get_synonym_to_col();
    CPPUNIT_ASSERT_EQUAL(1, (int)synToCol.size());
    map<string, int>::const_iterator siIt = synToCol.find("firstCol");
    CPPUNIT_ASSERT(siIt != synToCol.end());
    CPPUNIT_ASSERT_EQUAL(0, siIt->second);
    const vector<Record>& records = table->get_records();
    CPPUNIT_ASSERT_EQUAL(1, (int)records.size());
    record.reset();
    record.add_value(26156);
    CPPUNIT_ASSERT_EQUAL(record, records[0]);
    rTable.checkout_transaction_end();
    CPPUNIT_ASSERT_EQUAL(true, rTable.is_alive());
}

void Test_02_ResultsTable::test_syn_00_transaction_ss()
{
    ResultsTable rTable;
    CPPUNIT_ASSERT_EQUAL(true, rTable.is_alive());
    rTable.syn_00_transaction_begin("Course", RV_STRING, "Difficulty",
            RV_STRING);
    rTable.syn_00_add_row("CS1101S", "hard");
    rTable.syn_00_add_row("CS2101", "easy");
    rTable.syn_00_add_row("CS2104", "slack");
    rTable.syn_00_add_row("MA1101R", "tedious");
    rTable.syn_00_transaction_end();
    CPPUNIT_ASSERT_EQUAL(true, rTable.is_alive());
    rTable.checkout_transaction_begin();
    Table *table = rTable.checkout_table("Course");
    Table *tabTwo = rTable.checkout_table("Difficulty");
    CPPUNIT_ASSERT_EQUAL(table, tabTwo);
    const map<int, string>& colToSyn = table->get_col_to_synonym();
    CPPUNIT_ASSERT_EQUAL(2, (int)colToSyn.size());
    map<int, string>::const_iterator isIt = colToSyn.find(0);
    CPPUNIT_ASSERT(isIt != colToSyn.end());
    CPPUNIT_ASSERT_EQUAL(string("Course"), isIt->second);
    isIt = colToSyn.find(1);
    CPPUNIT_ASSERT(isIt != colToSyn.end());
    CPPUNIT_ASSERT_EQUAL(string("Difficulty"), isIt->second);
    const map<string, int>& synToCol = table->get_synonym_to_col();
    CPPUNIT_ASSERT_EQUAL(2, (int)synToCol.size());
    map<string, int>::const_iterator siIt = synToCol.find("Course");
    CPPUNIT_ASSERT(siIt != synToCol.end());
    CPPUNIT_ASSERT_EQUAL(0, siIt->second);
    siIt = synToCol.find("Difficulty");
    CPPUNIT_ASSERT(siIt != synToCol.end());
    CPPUNIT_ASSERT_EQUAL(1, siIt->second);
    const vector<Record>& records = table->get_records();
    CPPUNIT_ASSERT_EQUAL(4, (int)records.size());
    Record record;
    record.reset();
    record.add_value("CS1101S");
    record.add_value("hard");
    CPPUNIT_ASSERT_EQUAL(record, records[0]);
    record.reset();
    record.add_value("CS2101");
    record.add_value("easy");
    CPPUNIT_ASSERT_EQUAL(record, records[1]);
    record.reset();
    record.add_value("CS2104");
    record.add_value("slack");
    CPPUNIT_ASSERT_EQUAL(record, records[2]);
    record.reset();
    record.add_value("MA1101R");
    record.add_value("tedious");
    CPPUNIT_ASSERT_EQUAL(record, records[3]);
    rTable.checkout_transaction_end();
}

void Test_02_ResultsTable::test_syn_00_transaction_si()
{
    ResultsTable rTable;
    CPPUNIT_ASSERT_EQUAL(true, rTable.is_alive());
    rTable.syn_00_transaction_begin("Course", RV_STRING, "Score",
            RV_INT);
    rTable.syn_00_add_row("CS1101S", 96);
    rTable.syn_00_add_row("CS2101", 80);
    rTable.syn_00_add_row("CS2104", 85);
    rTable.syn_00_add_row("MA1101R", 82);
    rTable.syn_00_transaction_end();
    CPPUNIT_ASSERT_EQUAL(true, rTable.is_alive());
    rTable.checkout_transaction_begin();
    Table *table = rTable.checkout_table("Course");
    Table *tabTwo = rTable.checkout_table("Score");
    CPPUNIT_ASSERT_EQUAL(table, tabTwo);
    const map<int, string>& colToSyn = table->get_col_to_synonym();
    CPPUNIT_ASSERT_EQUAL(2, (int)colToSyn.size());
    map<int, string>::const_iterator isIt = colToSyn.find(0);
    CPPUNIT_ASSERT(isIt != colToSyn.end());
    CPPUNIT_ASSERT_EQUAL(string("Course"), isIt->second);
    isIt = colToSyn.find(1);
    CPPUNIT_ASSERT(isIt != colToSyn.end());
    CPPUNIT_ASSERT_EQUAL(string("Score"), isIt->second);
    const map<string, int>& synToCol = table->get_synonym_to_col();
    CPPUNIT_ASSERT_EQUAL(2, (int)synToCol.size());
    map<string, int>::const_iterator siIt = synToCol.find("Course");
    CPPUNIT_ASSERT(siIt != synToCol.end());
    CPPUNIT_ASSERT_EQUAL(0, siIt->second);
    siIt = synToCol.find("Score");
    CPPUNIT_ASSERT(siIt != synToCol.end());
    CPPUNIT_ASSERT_EQUAL(1, siIt->second);
    const vector<Record>& records = table->get_records();
    CPPUNIT_ASSERT_EQUAL(4, (int)records.size());
    Record record;
    record.reset();
    record.add_value("CS1101S");
    record.add_value(96);
    CPPUNIT_ASSERT_EQUAL(record, records[0]);
    record.reset();
    record.add_value("CS2101");
    record.add_value(80);
    CPPUNIT_ASSERT_EQUAL(record, records[1]);
    record.reset();
    record.add_value("CS2104");
    record.add_value(85);
    CPPUNIT_ASSERT_EQUAL(record, records[2]);
    record.reset();
    record.add_value("MA1101R");
    record.add_value(82);
    CPPUNIT_ASSERT_EQUAL(record, records[3]);
    rTable.checkout_transaction_end();
}

void Test_02_ResultsTable::test_syn_00_transaction_is()
{
    ResultsTable rTable;
    CPPUNIT_ASSERT_EQUAL(true, rTable.is_alive());
    rTable.syn_00_transaction_begin("Day", RV_INT, "Country",
            RV_STRING);
    rTable.syn_00_add_row(5, "China");
    rTable.syn_00_add_row(71, "Australia");
    rTable.syn_00_add_row(3261, "South Africa");
    rTable.syn_00_add_row(22, "Egypt");
    rTable.syn_00_add_row(761115, "Nowhere");
    rTable.syn_00_transaction_end();
    CPPUNIT_ASSERT_EQUAL(true, rTable.is_alive());
    rTable.checkout_transaction_begin();
    Table *table = rTable.checkout_table("Day");
    Table *tabTwo = rTable.checkout_table("Country");
    CPPUNIT_ASSERT_EQUAL(table, tabTwo);
    const map<int, string>& colToSyn = table->get_col_to_synonym();
    CPPUNIT_ASSERT_EQUAL(2, (int)colToSyn.size());
    map<int, string>::const_iterator isIt = colToSyn.find(0);
    CPPUNIT_ASSERT(isIt != colToSyn.end());
    CPPUNIT_ASSERT_EQUAL(string("Day"), isIt->second);
    isIt = colToSyn.find(1);
    CPPUNIT_ASSERT(isIt != colToSyn.end());
    CPPUNIT_ASSERT_EQUAL(string("Country"), isIt->second);
    const map<string, int>& synToCol = table->get_synonym_to_col();
    CPPUNIT_ASSERT_EQUAL(2, (int)synToCol.size());
    map<string, int>::const_iterator siIt = synToCol.find("Day");
    CPPUNIT_ASSERT(siIt != synToCol.end());
    CPPUNIT_ASSERT_EQUAL(0, siIt->second);
    siIt = synToCol.find("Country");
    CPPUNIT_ASSERT(siIt != synToCol.end());
    CPPUNIT_ASSERT_EQUAL(1, siIt->second);
    const vector<Record>& records = table->get_records();
    CPPUNIT_ASSERT_EQUAL(5, (int)records.size());
    Record record;
    record.reset();
    record.add_value(5);
    record.add_value("China");
    CPPUNIT_ASSERT_EQUAL(record, records[0]);
    record.reset();
    record.add_value(71);
    record.add_value("Australia");
    CPPUNIT_ASSERT_EQUAL(record, records[1]);
    record.reset();
    record.add_value(3261);
    record.add_value("South Africa");
    CPPUNIT_ASSERT_EQUAL(record, records[2]);
    record.reset();
    record.add_value(22);
    record.add_value("Egypt");
    CPPUNIT_ASSERT_EQUAL(record, records[3]);
    record.reset();
    record.add_value(761115);
    record.add_value("Nowhere");
    CPPUNIT_ASSERT_EQUAL(record, records[4]);
    rTable.checkout_transaction_end();
}

void Test_02_ResultsTable::test_syn_00_transaction_ii()
{
    ResultsTable rTable;
    CPPUNIT_ASSERT_EQUAL(true, rTable.is_alive());
    rTable.syn_00_transaction_begin("Day", RV_INT, "Time",
            RV_INT);
    rTable.syn_00_add_row(5, 721);
    rTable.syn_00_add_row(71, 33216);
    rTable.syn_00_add_row(3261, 7);
    rTable.syn_00_transaction_end();
    CPPUNIT_ASSERT_EQUAL(true, rTable.is_alive());
    rTable.checkout_transaction_begin();
    Table *table = rTable.checkout_table("Day");
    Table *tabTwo = rTable.checkout_table("Time");
    CPPUNIT_ASSERT_EQUAL(table, tabTwo);
    const map<int, string>& colToSyn = table->get_col_to_synonym();
    CPPUNIT_ASSERT_EQUAL(2, (int)colToSyn.size());
    map<int, string>::const_iterator isIt = colToSyn.find(0);
    CPPUNIT_ASSERT(isIt != colToSyn.end());
    CPPUNIT_ASSERT_EQUAL(string("Day"), isIt->second);
    isIt = colToSyn.find(1);
    CPPUNIT_ASSERT(isIt != colToSyn.end());
    CPPUNIT_ASSERT_EQUAL(string("Time"), isIt->second);
    const map<string, int>& synToCol = table->get_synonym_to_col();
    CPPUNIT_ASSERT_EQUAL(2, (int)synToCol.size());
    map<string, int>::const_iterator siIt = synToCol.find("Day");
    CPPUNIT_ASSERT(siIt != synToCol.end());
    CPPUNIT_ASSERT_EQUAL(0, siIt->second);
    siIt = synToCol.find("Time");
    CPPUNIT_ASSERT(siIt != synToCol.end());
    CPPUNIT_ASSERT_EQUAL(1, siIt->second);
    const vector<Record>& records = table->get_records();
    CPPUNIT_ASSERT_EQUAL(3, (int)records.size());
    Record record;
    record.reset();
    record.add_value(5);
    record.add_value(721);
    CPPUNIT_ASSERT_EQUAL(record, records[0]);
    record.reset();
    record.add_value(71);
    record.add_value(33216);
    CPPUNIT_ASSERT_EQUAL(record, records[1]);
    record.reset();
    record.add_value(3261);
    record.add_value(7);
    CPPUNIT_ASSERT_EQUAL(record, records[2]);
    rTable.checkout_transaction_end();
}

void Test_02_ResultsTable::test_syn_01_transaction_s()
{
    Record record;
    ResultsTable rTable;
    CPPUNIT_ASSERT_EQUAL(true, rTable.is_alive());
    rTable.syn_00_transaction_begin("Club", RV_STRING,
            "Country", RV_STRING);
    rTable.syn_00_add_row("Manchester United", "UK");
    rTable.syn_00_add_row("Arsenal", "UK");
    rTable.syn_00_add_row("Real Madrid", "Spain");
    rTable.syn_00_add_row("FC Barcelona", "Spain");
    rTable.syn_00_add_row("AC Milan", "Italy");
    rTable.syn_00_add_row("Juventus", "Italy");
    rTable.syn_00_transaction_end();
    CPPUNIT_ASSERT_EQUAL(true, rTable.is_alive());
    const vector<Record>& orgRecords =
            rTable.syn_01_transaction_begin("Player", "Club",
            RV_STRING);
    CPPUNIT_ASSERT_EQUAL(6, (int)orgRecords.size());
    record.reset();
    record.add_value("Manchester United");
    record.add_value("UK");
    CPPUNIT_ASSERT_EQUAL(record, orgRecords[0]);
    record.reset();
    record.add_value("Arsenal");
    record.add_value("UK");
    CPPUNIT_ASSERT_EQUAL(record, orgRecords[1]);
    record.reset();
    record.add_value("Real Madrid");
    record.add_value("Spain");
    CPPUNIT_ASSERT_EQUAL(record, orgRecords[2]);
    record.reset();
    record.add_value("FC Barcelona");
    record.add_value("Spain");
    CPPUNIT_ASSERT_EQUAL(record, orgRecords[3]);
    record.reset();
    record.add_value("AC Milan");
    record.add_value("Italy");
    CPPUNIT_ASSERT_EQUAL(record, orgRecords[4]);
    record.reset();
    record.add_value("Juventus");
    record.add_value("Italy");
    CPPUNIT_ASSERT_EQUAL(record, orgRecords[5]);
    rTable.syn_01_augment_new_row(0, "Wayne Rooney");
    rTable.syn_01_augment_new_row(0, "Robin Van Persie");
    rTable.syn_01_augment_new_row(2, "Cristiano Ronaldo");
    rTable.syn_01_augment_new_row(1, "Thierry Henry");
    rTable.syn_01_augment_new_row(4, "Alexandre Pato");
    rTable.syn_01_augment_new_row(3, "Lionel Messi");
    rTable.syn_01_augment_new_row(0, "Owen Hargreaves");
    rTable.syn_01_augment_new_row(3, "Andre Iniesta");
    rTable.syn_01_transaction_end();
    CPPUNIT_ASSERT_EQUAL(true, rTable.is_alive());

    rTable.checkout_transaction_begin();
    Table *table = rTable.checkout_table("Club");
    Table *tabTwo = rTable.checkout_table("Country");
    CPPUNIT_ASSERT_EQUAL(table, tabTwo);
    tabTwo = rTable.checkout_table("Player");
    CPPUNIT_ASSERT_EQUAL(table, tabTwo);
    const map<int, string>& colToSyn = table->get_col_to_synonym();
    CPPUNIT_ASSERT_EQUAL(3, (int)colToSyn.size());
    map<int, string>::const_iterator isIt = colToSyn.find(0);
    CPPUNIT_ASSERT(isIt != colToSyn.end());
    CPPUNIT_ASSERT_EQUAL(string("Club"), isIt->second);
    isIt = colToSyn.find(1);
    CPPUNIT_ASSERT(isIt != colToSyn.end());
    CPPUNIT_ASSERT_EQUAL(string("Country"), isIt->second);
    isIt = colToSyn.find(2);
    CPPUNIT_ASSERT(isIt != colToSyn.end());
    CPPUNIT_ASSERT_EQUAL(string("Player"), isIt->second);
    const map<string, int>& synToCol = table->get_synonym_to_col();
    CPPUNIT_ASSERT_EQUAL(3, (int)synToCol.size());
    map<string, int>::const_iterator siIt = synToCol.find("Club");
    CPPUNIT_ASSERT(siIt != synToCol.end());
    CPPUNIT_ASSERT_EQUAL(0, siIt->second);
    siIt = synToCol.find("Country");
    CPPUNIT_ASSERT(siIt != synToCol.end());
    CPPUNIT_ASSERT_EQUAL(1, siIt->second);
    siIt = synToCol.find("Player");
    CPPUNIT_ASSERT(siIt != synToCol.end());
    CPPUNIT_ASSERT_EQUAL(2, siIt->second);
    const vector<Record>& records = table->get_records();
    CPPUNIT_ASSERT_EQUAL(8, (int)records.size());
    record.reset();
    record.add_value("Manchester United");
    record.add_value("UK");
    record.add_value("Wayne Rooney");
    CPPUNIT_ASSERT_EQUAL(record, records[0]);
    record.reset();
    record.add_value("Manchester United");
    record.add_value("UK");
    record.add_value("Robin Van Persie");
    CPPUNIT_ASSERT_EQUAL(record, records[1]);
    record.reset();
    record.add_value("Real Madrid");
    record.add_value("Spain");
    record.add_value("Cristiano Ronaldo");
    CPPUNIT_ASSERT_EQUAL(record, records[2]);
    record.reset();
    record.add_value("Arsenal");
    record.add_value("UK");
    record.add_value("Thierry Henry");
    CPPUNIT_ASSERT_EQUAL(record, records[3]);
    record.reset();
    record.add_value("AC Milan");
    record.add_value("Italy");
    record.add_value("Alexandre Pato");
    CPPUNIT_ASSERT_EQUAL(record, records[4]);
    record.reset();
    record.add_value("FC Barcelona");
    record.add_value("Spain");
    record.add_value("Lionel Messi");
    CPPUNIT_ASSERT_EQUAL(record, records[5]);
    record.reset();
    record.add_value("Manchester United");
    record.add_value("UK");
    record.add_value("Owen Hargreaves");
    CPPUNIT_ASSERT_EQUAL(record, records[6]);
    record.reset();
    record.add_value("FC Barcelona");
    record.add_value("Spain");
    record.add_value("Andre Iniesta");
    CPPUNIT_ASSERT_EQUAL(record, records[7]);
    rTable.checkout_transaction_end();
}

void Test_02_ResultsTable::test_syn_01_transaction_i()
{
    ResultsTable rTable;
    CPPUNIT_ASSERT_EQUAL(true, rTable.is_alive());
    rTable.syn_00_transaction_begin("Country", RV_STRING,
            "Season", RV_STRING);
    rTable.syn_00_add_row("China", "Summer");
    rTable.syn_00_add_row("China", "Winter");
    rTable.syn_00_add_row("China", "Autumn");
    rTable.syn_00_add_row("USA", "Winter");
    rTable.syn_00_add_row("Singapore", "Summer");
    rTable.syn_00_add_row("Singapore", "Spring");
    rTable.syn_00_add_row("Singapore", "Autumn");
    rTable.syn_00_add_row("Singapore", "Winter");
    rTable.syn_00_add_row("USA", "Summer");
    rTable.syn_00_transaction_end();
    CPPUNIT_ASSERT_EQUAL(true, rTable.is_alive());
    rTable.syn_01_transaction_begin("Temperature", "Season", RV_INT);
    rTable.syn_01_augment_new_row(4, 34);
    rTable.syn_01_augment_new_row(3, 0);
    rTable.syn_01_augment_new_row(1, -10);
    rTable.syn_01_augment_new_row(7, 25);
    rTable.syn_01_transaction_end();
    CPPUNIT_ASSERT_EQUAL(true, rTable.is_alive());
    rTable.checkout_transaction_begin();
    Table *table = rTable.checkout_table("Country");
    Table *tableTwo = rTable.checkout_table("Season");
    CPPUNIT_ASSERT_EQUAL(table, tableTwo);
    tableTwo = rTable.checkout_table("Temperature");
    CPPUNIT_ASSERT_EQUAL(table, tableTwo);
    const map<int, string>& colToSyn = table->get_col_to_synonym();
    CPPUNIT_ASSERT_EQUAL(3, (int)colToSyn.size());
    map<int, string>::const_iterator isIt = colToSyn.find(0);
    CPPUNIT_ASSERT(isIt != colToSyn.end());
    CPPUNIT_ASSERT_EQUAL(string("Country"), isIt->second);
    isIt = colToSyn.find(1);
    CPPUNIT_ASSERT(isIt != colToSyn.end());
    CPPUNIT_ASSERT_EQUAL(string("Season"), isIt->second);
    isIt = colToSyn.find(2);
    CPPUNIT_ASSERT(isIt != colToSyn.end());
    CPPUNIT_ASSERT_EQUAL(string("Temperature"), isIt->second);
    const map<string, int>& synToCol = table->get_synonym_to_col();
    CPPUNIT_ASSERT_EQUAL(3, (int)synToCol.size());
    map<string, int>::const_iterator siIt = synToCol.find("Country");
    CPPUNIT_ASSERT(siIt != synToCol.end());
    CPPUNIT_ASSERT_EQUAL(0, siIt->second);
    siIt = synToCol.find("Season");
    CPPUNIT_ASSERT(siIt != synToCol.end());
    CPPUNIT_ASSERT_EQUAL(1, siIt->second);
    siIt = synToCol.find("Temperature");
    CPPUNIT_ASSERT(siIt != synToCol.end());
    CPPUNIT_ASSERT_EQUAL(2, siIt->second);
    const vector<Record>& records = table->get_records();
    CPPUNIT_ASSERT_EQUAL(4, (int)records.size());
    Record record;
    record.reset();
    record.add_value("Singapore");
    record.add_value("Summer");
    record.add_value(34);
    CPPUNIT_ASSERT_EQUAL(record, records[0]);
    record.reset();
    record.add_value("USA");
    record.add_value("Winter");
    record.add_value(0);
    CPPUNIT_ASSERT_EQUAL(record, records[1]);
    record.reset();
    record.add_value("China");
    record.add_value("Winter");
    record.add_value(-10);
    CPPUNIT_ASSERT_EQUAL(record, records[2]);
    record.reset();
    record.add_value("Singapore");
    record.add_value("Winter");
    record.add_value(25);
    CPPUNIT_ASSERT_EQUAL(record, records[3]);
    rTable.checkout_transaction_end();
}

void Test_02_ResultsTable::test_syn_11_transaction()
{
    Record record;
    ResultsTable rTable;
        CPPUNIT_ASSERT_EQUAL(true, rTable.is_alive());
    rTable.syn_00_transaction_begin("Club", RV_STRING,
            "Country", RV_STRING);
    rTable.syn_00_add_row("Manchester United", "UK");
    rTable.syn_00_add_row("Arsenal", "UK");
    rTable.syn_00_add_row("Real Madrid", "Spain");
    rTable.syn_00_add_row("FC Barcelona", "Spain");
    rTable.syn_00_add_row("AC Milan", "Italy");
    rTable.syn_00_add_row("Juventus", "Italy");
    rTable.syn_00_add_row("Chelsea", "UK");
    rTable.syn_00_add_row("Lyon", "France");
    rTable.syn_00_add_row("Inter Milan", "Italy");
    rTable.syn_00_add_row("Manchester City", "UK");
    rTable.syn_00_transaction_end();
    CPPUNIT_ASSERT_EQUAL(true, rTable.is_alive());
    CPPUNIT_ASSERT_EQUAL(true, rTable.is_alive());
    rTable.syn_01_transaction_begin("Player", "Club", RV_STRING);
    rTable.syn_01_augment_new_row(0, "Wayne Rooney");
    rTable.syn_01_augment_new_row(1, "Thierry Henry");
    rTable.syn_01_augment_new_row(3, "Lionel Messi");
    rTable.syn_01_augment_new_row(3, "David Villa");
    rTable.syn_01_augment_new_row(2, "Cristiano Ronaldo");
    rTable.syn_01_augment_new_row(6, "Frank Lampard");
    rTable.syn_01_augment_new_row(9, "Mario Balotelli");
    rTable.syn_01_augment_new_row(5, "Gianluigi Buffon");
    rTable.syn_01_augment_new_row(7, "Juninho");
    rTable.syn_01_augment_new_row(9, "Carlos Tevez");
    rTable.syn_01_augment_new_row(3, "Xavi Hernandez");
    rTable.syn_01_augment_new_row(0, "Robin Van Persie");
    rTable.syn_01_augment_new_row(9, "Vincent Kompany");
    rTable.syn_01_augment_new_row(2, "Sergio Ramos");
    rTable.syn_01_augment_new_row(2, "Iker Casillas");
    rTable.syn_01_augment_new_row(1, "Dennis Bergkamp");
    rTable.syn_01_augment_new_row(4, "Ronaldo");
    rTable.syn_01_augment_new_row(0, "David Beckham");
    rTable.syn_01_augment_new_row(6, "Gianfranco Zola");
    rTable.syn_01_transaction_end();
    CPPUNIT_ASSERT_EQUAL(true, rTable.is_alive());
    const vector<Record>& tmpRecords =
            rTable.syn_11_transaction_begin("Club", "Player");
    CPPUNIT_ASSERT_EQUAL(19, (int)tmpRecords.size());
    rTable.syn_11_mark_row_ok(1);
    rTable.syn_11_mark_row_ok(5);
    rTable.syn_11_mark_row_ok(4);
    rTable.syn_11_mark_row_ok(16);
    rTable.syn_11_transaction_end();
    CPPUNIT_ASSERT_EQUAL(true, rTable.is_alive());
    rTable.checkout_transaction_begin();
    Table *table = rTable.checkout_table("Club");
    Table *tableTwo = rTable.checkout_table("Country");
    CPPUNIT_ASSERT_EQUAL(table, tableTwo);
    tableTwo = rTable.checkout_table("Player");
    CPPUNIT_ASSERT_EQUAL(table, tableTwo);
    const map<int, string>& colToSyn = table->get_col_to_synonym();
    CPPUNIT_ASSERT_EQUAL(3, (int)colToSyn.size());
    map<int, string>::const_iterator isIt = colToSyn.find(0);
    CPPUNIT_ASSERT(isIt != colToSyn.end());
    CPPUNIT_ASSERT_EQUAL(string("Club"), isIt->second);
    isIt = colToSyn.find(1);
    CPPUNIT_ASSERT(isIt != colToSyn.end());
    CPPUNIT_ASSERT_EQUAL(string("Country"), isIt->second);
    isIt = colToSyn.find(2);
    CPPUNIT_ASSERT(isIt != colToSyn.end());
    CPPUNIT_ASSERT_EQUAL(string("Player"), isIt->second);
    const map<string, int>& synToCol = table->get_synonym_to_col();
    CPPUNIT_ASSERT_EQUAL(3, (int)synToCol.size());
    map<string, int>::const_iterator siIt = synToCol.find("Club");
    CPPUNIT_ASSERT(siIt != synToCol.end());
    CPPUNIT_ASSERT_EQUAL(0, siIt->second);
    siIt = synToCol.find("Country");
    CPPUNIT_ASSERT(siIt != synToCol.end());
    CPPUNIT_ASSERT_EQUAL(1, siIt->second);
    siIt = synToCol.find("Player");
    CPPUNIT_ASSERT(siIt != synToCol.end());
    CPPUNIT_ASSERT_EQUAL(2, siIt->second);
    const vector<Record>& records = table->get_records();
    CPPUNIT_ASSERT_EQUAL(4, (int)records.size());
    record.reset();
    record.add_value("Arsenal");
    record.add_value("UK");
    record.add_value("Thierry Henry");
    CPPUNIT_ASSERT_EQUAL(record, records[0]);
    record.reset();
    record.add_value("Real Madrid");
    record.add_value("Spain");
    record.add_value("Cristiano Ronaldo");
    CPPUNIT_ASSERT_EQUAL(record, records[1]);
    record.reset();
    record.add_value("Chelsea");
    record.add_value("UK");
    record.add_value("Frank Lampard");
    CPPUNIT_ASSERT_EQUAL(record, records[2]);
    record.reset();
    record.add_value("AC Milan");
    record.add_value("Italy");
    record.add_value("Ronaldo");
    CPPUNIT_ASSERT_EQUAL(record, records[3]);
    rTable.checkout_transaction_end();
}

void Test_02_ResultsTable::test_syn_22_transaction()
{
    Record record;
    ResultsTable rTable;
    CPPUNIT_ASSERT_EQUAL(true, rTable.is_alive());
    rTable.syn_00_transaction_begin("Club", RV_STRING, "Country",
            RV_STRING);
    rTable.syn_00_add_row("Manchester United", "UK");
    rTable.syn_00_add_row("Arsenal", "UK");
    rTable.syn_00_add_row("Real Madrid", "Spain");
    rTable.syn_00_add_row("AC Milan", "Italy");
    rTable.syn_00_add_row("Inter Milan", "Italy");
    rTable.syn_00_add_row("Manchester City", "UK");
    rTable.syn_00_transaction_end();
    CPPUNIT_ASSERT_EQUAL(true, rTable.is_alive());
    rTable.syn_00_transaction_begin("Singer", RV_STRING, "Age",
            RV_INT);
    rTable.syn_00_add_row("Celine Dion", 50);
    rTable.syn_00_add_row("Katy Perry", 35);
    rTable.syn_00_add_row("Psy", 40);
    rTable.syn_00_add_row("Bruno Mars", 30);
    rTable.syn_00_add_row("Lady Gaga", 34);
    rTable.syn_00_transaction_end();
    CPPUNIT_ASSERT_EQUAL(true, rTable.is_alive());
    pair<const vector<Record> *, const vector<Record> *> ip =
            rTable.syn_22_transaction_begin("Club", "Singer");
    const vector<Record> *aRecords = ip.first;
    const vector<Record> *bRecords = ip.second;
    CPPUNIT_ASSERT_EQUAL(6, (int)aRecords->size());
    record.reset();
    record.add_value("Manchester United");
    record.add_value("UK");
    CPPUNIT_ASSERT_EQUAL(record, (*aRecords)[0]);
    record.reset();
    record.add_value("Arsenal");
    record.add_value("UK");
    CPPUNIT_ASSERT_EQUAL(record, (*aRecords)[1]);
    record.reset();
    record.add_value("Real Madrid");
    record.add_value("Spain");
    CPPUNIT_ASSERT_EQUAL(record, (*aRecords)[2]);
    record.reset();
    record.add_value("AC Milan");
    record.add_value("Italy");
    CPPUNIT_ASSERT_EQUAL(record, (*aRecords)[3]);
    record.reset();
    record.add_value("Inter Milan");
    record.add_value("Italy");
    CPPUNIT_ASSERT_EQUAL(record, (*aRecords)[4]);
    record.reset();
    record.add_value("Manchester City");
    record.add_value("UK");
    CPPUNIT_ASSERT_EQUAL(record, (*aRecords)[5]);
    CPPUNIT_ASSERT_EQUAL(5, (int)bRecords->size());
    record.reset();
    record.add_value("Celine Dion");
    record.add_value(50);
    CPPUNIT_ASSERT_EQUAL(record, (*bRecords)[0]);
    record.reset();
    record.add_value("Katy Perry");
    record.add_value(35);
    CPPUNIT_ASSERT_EQUAL(record, (*bRecords)[1]);
    record.reset();
    record.add_value("Psy");
    record.add_value(40);
    CPPUNIT_ASSERT_EQUAL(record, (*bRecords)[2]);
    record.reset();
    record.add_value("Bruno Mars");
    record.add_value(30);
    CPPUNIT_ASSERT_EQUAL(record, (*bRecords)[3]);
    record.reset();
    record.add_value("Lady Gaga");
    record.add_value(34);
    CPPUNIT_ASSERT_EQUAL(record, (*bRecords)[4]);
    rTable.syn_22_add_row((*aRecords)[0], (*bRecords)[2]);
    rTable.syn_22_add_row((*aRecords)[3], (*bRecords)[0]);
    rTable.syn_22_add_row(4, 3);
    rTable.syn_22_add_row(5, 0);
    rTable.syn_22_transaction_end();
    CPPUNIT_ASSERT_EQUAL(true, rTable.is_alive());
    rTable.checkout_transaction_begin();
    Table *table = rTable.checkout_table("Club");
    Table *tableTwo = rTable.checkout_table("Country");
    CPPUNIT_ASSERT_EQUAL(table, tableTwo);
    tableTwo = rTable.checkout_table("Singer");
    CPPUNIT_ASSERT_EQUAL(table, tableTwo);
    tableTwo = rTable.checkout_table("Age");
    CPPUNIT_ASSERT_EQUAL(table, tableTwo);
    const map<int, string>& colToSyn = table->get_col_to_synonym();
    CPPUNIT_ASSERT_EQUAL(4, (int)colToSyn.size());
    map<int, string>::const_iterator isIt = colToSyn.find(0);
    CPPUNIT_ASSERT(isIt != colToSyn.end());
    CPPUNIT_ASSERT_EQUAL(string("Club"), isIt->second);
    isIt = colToSyn.find(1);
    CPPUNIT_ASSERT(isIt != colToSyn.end());
    CPPUNIT_ASSERT_EQUAL(string("Country"), isIt->second);
    isIt = colToSyn.find(2);
    CPPUNIT_ASSERT(isIt != colToSyn.end());
    CPPUNIT_ASSERT_EQUAL(string("Singer"), isIt->second);
    isIt = colToSyn.find(3);
    CPPUNIT_ASSERT(isIt != colToSyn.end());
    CPPUNIT_ASSERT_EQUAL(string("Age"), isIt->second);
    const map<string, int>& synToCol = table->get_synonym_to_col();
    CPPUNIT_ASSERT_EQUAL(4, (int)synToCol.size());
    map<string, int>::const_iterator siIt = synToCol.find("Club");
    CPPUNIT_ASSERT(siIt != synToCol.end());
    CPPUNIT_ASSERT_EQUAL(0, siIt->second);
    siIt = synToCol.find("Country");
    CPPUNIT_ASSERT(siIt != synToCol.end());
    CPPUNIT_ASSERT_EQUAL(1, siIt->second);
    siIt = synToCol.find("Singer");
    CPPUNIT_ASSERT(siIt != synToCol.end());
    CPPUNIT_ASSERT_EQUAL(2, siIt->second);
    siIt = synToCol.find("Age");
    CPPUNIT_ASSERT(siIt != synToCol.end());
    CPPUNIT_ASSERT_EQUAL(3, siIt->second);
    const vector<Record>& records = table->get_records();
    CPPUNIT_ASSERT_EQUAL(4, (int)records.size());
    record.reset();
    record.add_value("Manchester United");
    record.add_value("UK");
    record.add_value("Psy");
    record.add_value(40);
    CPPUNIT_ASSERT_EQUAL(record, records[0]);
    record.reset();
    record.add_value("AC Milan");
    record.add_value("Italy");
    record.add_value("Celine Dion");
    record.add_value(50);
    CPPUNIT_ASSERT_EQUAL(record, records[1]);
    record.reset();
    record.add_value("Inter Milan");
    record.add_value("Italy");
    record.add_value("Bruno Mars");
    record.add_value(30);
    CPPUNIT_ASSERT_EQUAL(record, records[2]);
    record.reset();
    record.add_value("Manchester City");
    record.add_value("UK");
    record.add_value("Celine Dion");
    record.add_value(50);
    CPPUNIT_ASSERT_EQUAL(record, records[3]);
    rTable.checkout_transaction_end();
}